version: 2.1
orbs:
  slack: circleci/slack@4.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 ));
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - restore_cache: # Restore from cache
      #     keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          mentions: '@dev'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - restore_cache: # Restore from cache
      #     keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
              cd backend
              npm i
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          mentions: '@dev'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1


  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Front-end test
          command: |
             # Your code here
             cd frontend
             npm i
             npm run test
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys: [backend-build]
      # Your job code here
      - run:
          name: Back-end test
          command: |
             # Your code here
             cd backend
             npm i
             npm run test
      - slack/notify:
          event: fail
          mentions: '@dev'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1
  scan-frontend:
    docker:
       # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Code Analysis
          command: |
             # Your code here
             cd frontend
             npm audit fix --audit-level=critical
  scan-backend:
    docker:
       # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys: [backend-build]
      # Your job code here
      - run:
          name: Code Analysis
          command: |
             # Your code here
             cd backend
             npm audit fix --audit-level=critical
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
