version: 2.1
orbs:
  slack: circleci/slack@4.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID}/" --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable SUCCESS = 1
            SUCCESS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            echo ${SUCCESS}
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
          when: on_fail
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - restore_cache: # Restore from cache
      #     keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm i
            npm run build
      - slack/notify:
          custom: |
            {
             "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "Job succceded ! 🥳",
                  "emoji": true
                }
              }
              ]
            }
          event: pass
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - restore_cache: # Restore from cache
      #     keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
              cd backend
              npm i
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          custom: |
            {
             "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "Job Failed ! ☹️",
                  "emoji": true
                }
              }
              ]
            }
          event: fail
  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Front-end test
          command: |
             # Your code here
             cd frontend
             npm i
             npm run test
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys: [backend-build]
      # Your job code here
      - run:
          name: Back-end test
          command: |
             # Your code here
             cd backend
             npm i
             npm run test
  scan-frontend:
    docker:
       # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Code Analysis
          command: |
             # Your code here
             cd frontend
             npm audit fix --audit-level=critical
  scan-backend:
    docker:
       # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys: [backend-build]
      # Your job code here
      - run:
          name: Code Analysis
          command: |
             # Your code here
             cd backend
             npm audit fix --audit-level=critical
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID} \
              --template-file .circleci/files/frontend.yml \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Add back-end ip to ansible inventory and save to https://memstash.io
          command: |
              yum -y install tar gzip jq npm
              PUBLIC_IP=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
                --output text)
                echo ${PUBLIC_IP} >> .circleci/ansible/inventory.txt
                cat ".circleci/ansible/inventory.txt"
                echo ${PUBLIC_IP}
                curl -H "Content-Type: text/plain" \
                  -H "token: ${CIRCLE_WORKFLOW_ID}" \
                  --request PUT \
                  --data ${PUBLIC_IP} \
                  https://api.memstash.io/values/public_ip
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible
      - destroy-environment

      # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["f6:a3:a2:0a:f2:8d:3d:8b:59:60:58:3b:a7:ce:f0:02"] # get it from CircleCI -> Project Settings -> SSH Keys -> Additional SSH Keys
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            pip3 install awscli
      - run:
          name: Get the public IP of EC2
          command: |
            cat .circleci/ansible/inventory.txt
      - run:
          name: Create dotenv file
          command: |
            cd backend/
            echo > ".env"
            echo ENVIRONMENT="production" >> ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
      - run:
          name: Configure server via ansible to deploy the backend
          command: |
            cat ".circleci/ansible/inventory.txt"
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            echo > ".env"
            echo ENVIRONMENT="production" >> ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            npm install
            npm run migrations > migrations.txt
            cat migrations.txt

      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            cat migrations.txt
            if [ `grep -c "has been executed successfully" migrations.txt` -gt 0 ]
            then
            curl -H "Content-Type: text/plain" \
              -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request PUT --data "1" \
              https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
     # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y gcc-c++ make
            curl -fsSL https://rpm.nodesource.com/setup_lts.x | bash -
            yum install -y nodejs
            node -v
            npm -v
      - run:
          name: Get backend url
          command: |
            # your code here
            cd frontend/
            BACKENDIP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_ip)
            echo API_URL="http://${BACKENDIP}:3030" > ".env"
            cat .env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm i
            npm run build
            aws s3 sync ./dist s3://"udapeople-${CIRCLE_WORKFLOW_ID}"
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["f6:a3:a2:0a:f2:8d:3d:8b:59:60:58:3b:a7:ce:f0:02"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update npm
            apk add --update curl
            pip3 --no-cache-dir install awscli
      - run:
          name: Build Backend
          command: |
            cd backend
            npm i
            npm run build
      - run:
          name: "tar archiv"
          command: |
            tar -cf backend.tar ./backend/dist
      - run:
          name: Deploy backend
          command: |
            cat ".circleci/ansible/inventory.txt"
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - revert-migrations
      - destroy-environment

  smoke-test:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update curl
            apk add --update npm
            pip3 --no-cache-dir install awscli
      - run:
          name: Get backend url
          command: |
            BACKENDIP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_ip)
            echo ${BACKENDIP}
            echo ${CIRCLE_WORKFLOW_ID}
      - run:
          name: Backend smoke test.
          command: |

            STATUSAPI="https://${BACKENDIP}:3030/api/status"
            if curl -s --head ${STATUSAPI}
            then
              echo "OK"
            else
              echo "Fail"
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website.eu-central-1.amazonaws.com"
            if ( curl -s ${URL} | grep "Welcome" )
            then
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            echo "Create/Update CloudFront"
            aws cloudformation deploy \
              --stack-name udapeople-cloudfront \
              --template-file .circleci/files/cloudfront.yml \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}"

      - destroy-environment

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OLD_WORKFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --output text)
            echo Old workflow ID : "${OLD_WORKFLOW_ID}"
            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter UPDATE_COMPLETE CREATE_COMPLETE --output text)
      - run:
          name: Remove old stacks and files
          command: |
            echo "Delete old infrastructure"
            if [[ "${STACKS[@]}" =~ "${OLD_CIRCLE_WORKFLOW_ID}" ]]
            then
              echo deleting all files at S3 bucket udapeople-s3bucket-${OLD_WORKFLOW_ID}
              aws s3 rm s3://udapeople-${OLD_WORKFLOW_ID}/ --recursive
              echo deleting stack udapeople-frontend-${OLD_WORKFLOW_ID}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OLD_WORKFLOW_ID}
              echo deleting stack udapeople-backend-${OLD_WORKFLOW_ID}
              aws cloudformation delete-stack --stack-name udapeople-backend-${OLD_WORKFLOW_ID}
            fi
workflows:
  default:
    jobs:
      # - build-frontend:
      #     context:
      #       - slack
      # - build-backend :
      #     context:
      #       - slack
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     context:
      #       - slack
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
