version: 2.1
orbs:
  slack: circleci/slack@4.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 ));
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - restore_cache: # Restore from cache
      #     keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm i
            npm run build
      - slack/notify:
          custom: |
            {
             "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "Job succceded ! 🥳",
                  "emoji": true
                }
              }
              ]
            }
          event: pass
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - restore_cache: # Restore from cache
      #     keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
              cd backend
              npm i
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          custom: |
            {
             "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "Job Failed ! ☹️",
                  "emoji": true
                }
              }
              ]
            }
          event: fail
  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Front-end test
          command: |
             # Your code here
             cd frontend
             npm i
             npm run test
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys: [backend-build]
      # Your job code here
      - run:
          name: Back-end test
          command: |
             # Your code here
             cd backend
             npm i
             npm run test
  scan-frontend:
    docker:
       # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Code Analysis
          command: |
             # Your code here
             cd frontend
             npm audit fix --audit-level=critical
  scan-backend:
    docker:
       # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout # Checkout code from git
      - restore_cache: # Restore from cache
          keys: [backend-build]
      # Your job code here
      - run:
          name: Code Analysis
          command: |
             # Your code here
             cd backend
             npm audit fix --audit-level=critical
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
            exit 0


      # - run:
      #     name: Ensure front-end infrastructure exist
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/frontend.yml \
      #         --tags project=udapeople \
      #         --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      #         exit 0
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --region eu-central-1 \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> .circleci/ansible/inventory.txt
            exit 0
      - persist_to_workspace:
          root: ~/
          paths:
            - .circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure

workflows:
  default:
    jobs:
      # - build-frontend:
      #     context:
      #       - slack
      # - build-backend :
      #     context:
      #       - slack
      #- test-frontend:
       #   requires: [build-frontend]
      # - test-backend:
      #     context:
      #       - slack
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure
          # requires: [test-backend, scan-frontend, scan-backend]
